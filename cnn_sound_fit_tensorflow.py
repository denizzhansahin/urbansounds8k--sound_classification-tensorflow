# -*- coding: utf-8 -*-
"""cnn_sound-fit_tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kTlx_qfm8WM9jCMGPvII7PbgTgWRXGjS
"""

#veri seti indirme
!wget https://zenodo.org/record/1203745/files/UrbanSound8K.tar.gz
!tar -xvf /content/UrbanSound8K.tar.gz

#kütüphanelerin eklenmesi
import tensorflow as tf
import librosa
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import librosa.display

#görüntü işleme için
import cv2
from google.colab.patches import cv2_imshow

#veri işleme
veri = pd.read_csv('/content/UrbanSound8K/metadata/UrbanSound8K.csv')
className = veri.iloc[0:8000,7:]

veri1 = pd.read_csv('/content/UrbanSound8K/metadata/UrbanSound8K.csv')
slice_name = veri1.iloc[0:8000,0:1]

veri2 = pd.read_csv('/content/UrbanSound8K/metadata/UrbanSound8K.csv')
fold_name = veri2.iloc[0:8000,5:6]

veri3 = pd.read_csv('/content/UrbanSound8K/metadata/UrbanSound8K.csv')
classID_name = veri3.iloc[0:8000,6:7]

#sesi goruntuye donusturme fonksiyonu
def create_spectrogram(y):
    spec = librosa.feature.melspectrogram(y=y)
    spec_conv = librosa.amplitude_to_db(spec, ref=np.max)
    return spec_conv

#her fold içindeki tüm classID'ler ile işlem yapar

if "gorsel" not in os.listdir():
    os.mkdir("gorsel")

if "opencv_gorsel" not in os.listdir():
    os.mkdir("opencv_gorsel")


i = 0
file_name = ''
fold = ''
dosya_yolu =''
audio_data = ''
images = []

while i < 2300:
  a = '/content/UrbanSound8K/audio/fold'
  if(fold_name.values[i]!=-1):
    dosya_isim = slice_name.values[i]
    print(dosya_isim)
    dosya_isim1 = dosya_isim[0]
    print(dosya_isim1)

    fold_isim = fold_name.values[i]
    print(fold_isim)
    fold = str(fold_isim[0])
    print(fold)


    audio_data = '/content/UrbanSound8K/audio/fold'+fold+'/'+dosya_isim1
    print(audio_data)
    x , sr = librosa.load(audio_data)
    spectrogram = create_spectrogram(x)
    print(type(x), type(sr))
    print(x.shape, sr)
    plt.figure()
    librosa.display.specshow(spectrogram)
    

    n = i
    n =str(n)
    file_name = '/content/gorsel/gorsel'+n+'.png'
    plt.savefig(file_name)
    plt.close()
    

    #listeye elemanini alma
    etiket_eleman = classID_name.values[i]

    img = cv2.imread(file_name, 0)
    #cv2_imshow(img)
    opencv_isim = '/content/opencv_gorsel/gorsel'+n+'.png'
    cv2.imwrite(opencv_isim, img)
    img = cv2.resize(img, (128,128))
    img = img/255
    images.append([img, int(etiket_eleman[0])])
    #cv2.waitKey()
    #cv2.destroyAllWindows()

    n = int(n)
  i+=1
  print("-----------------İŞLEM DEGERİ : \t",i)

#listeyi bölme
X = []
y = []

images_uzunluk = len(images)

uzunluk_x = int(len(images)*(8/10))
uzunluk_y = int(len(images)*(8/10))

uzunluk_x_test = int(len(images)*(9/10))
uzunluk_y_test = int(len(images)*(9/10))

for image_file, idx in images:
    X.append(image_file)
    y.append(idx)

X_train = X[:uzunluk_x]
y_train = y[:uzunluk_y]

X_val = X[uzunluk_x:uzunluk_x_test]
y_val = y[uzunluk_y:uzunluk_y_test]

X_test = X[uzunluk_x_test:]
y_test = y[uzunluk_y_test:]


print("images uzunluk:\t",images_uzunluk,"\n")
print("X uzunluk %80 degeri:\t",uzunluk_x,"\n")
print("Y uzunluk %80 degeri:\t",uzunluk_y,"\n")
print("X uzunluk %90 degeri:\t",uzunluk_x_test,"\n")
print("Y uzunluk %90 degeri:\t",uzunluk_y_test,"\n")

#liste boyutlandırma ve donusumleri
import random
import pickle

X_train = np.array(X_train)
y_train = np.array(y_train)

X_val = np.array(X_val)
y_val = np.array(y_val)

X_test = np.array(X_test)
y_test = np.array(y_test)

X_train = X_train.reshape(-1, 128, 128, 1) 
X_val = X_val.reshape(-1, 128, 128, 1) 
X_test = X_test.reshape(-1, 128, 128, 1) 

if "pickles" not in os.listdir():
    os.mkdir("pickles")

with open("pickles/X_train.pickle", "wb") as f:
  pickle.dump(X_train, f)  
with open("pickles/y_train.pickle", "wb") as f:
  pickle.dump(y_train, f)

with open("pickles/X_val.pickle", "wb") as f:
  pickle.dump(X_val, f)  
with open("pickles/y_val.pickle", "wb") as f:
  pickle.dump(y_val, f)

with open("pickles/X_test.pickle", "wb") as f:
  pickle.dump(X_test, f)  
with open("pickles/y_test.pickle", "wb") as f:
  pickle.dump(y_test, f)

# Model
model = tf.keras.Sequential()

# Feature Extraction
model.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), strides=(2,2), padding="same", input_shape=(128, 128, 1)))
model.add(tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)))

model.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), strides=(2,2), padding="same", activation="relu"))
model.add(tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)))
model.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), strides=(2,2), padding="same", activation="relu"))
model.add(tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)))

# Flatten
model.add(tf.keras.layers.Flatten())

# Classification
model.add(tf.keras.layers.Dense(64, activation="relu"))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(64, activation="relu"))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(64, activation="relu"))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(64, activation="relu"))
model.add(tf.keras.layers.Dropout(0.5))

# Output Layer
model.add(tf.keras.layers.Dense(10, activation="softmax"))


model.compile(optimizer='adam', loss="sparse_categorical_crossentropy", metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=1000, validation_data=(X_val, y_val))

result = model.evaluate(X_test, y_test)
print(f"Loss: {result[0]} - Accuracy: {result[1]}")

plt.plot(history.history["loss"], label="Train")
plt.plot(history.history["val_loss"], label="Validation")

plt.xlabel("Epoch")
plt.ylabel("Loss")

plt.legend()
plt.show()

plt.plot(history.history["accuracy"], label="Train")
plt.plot(history.history["val_accuracy"], label="Validation")

plt.xlabel("Epoch")
plt.ylabel("Accuracy")

plt.legend()
plt.show()

#modeli kaydetmek
with open("model_sound_cnn.pickle", "wb") as f:
  pickle.dump(history, f)

!zip -r opencv.zip '/content/opencv_gorsel'

!zip -r opencv.zip '/content/gorsel'

!zip -r opencv.zip '/content/pickles'